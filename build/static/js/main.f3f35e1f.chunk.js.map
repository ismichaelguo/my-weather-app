{"version":3,"sources":["asset/image/water.svg","asset/image/cold.svg","asset/image/high-temperature.svg","component/city-card/CityCard.js","component/city-card-container/CityCardContainer.js","component/weather-forecase-board/WeatherForecastBoard.js","component/current-weather-board/CurrentWeatherBoard.js","App.js","index.js"],"names":["module","exports","CityCard","props","deleteCard","e","cardIndex","target","id","onDeleteCard","state","photo","className","onClick","this","index","getWeatherData","city","src","alt","React","Component","CityCardContainer","cities","map","key","cityImage","selectedCity","WeatherForecastBoard","getDay","date","whichDay","Date","parse","replace","getDegree","temp","newTemp","Math","floor","getPercent","degree","getForecastBoard","WEATHER_DATA","weather","data","length","furtherDays","day","moonrise_ts","datetime","Humidity","rh","icon","minTemp","min_temp","maxTemp","max_temp","CurrentForecastBoard","getDate","undefined","whichDate","getMonth","getWeatherBoard","percentage","pop","timestamp_local","city_name","vis","value","text","styles","buildStyles","textColor","pathColor","trailColor","App","handleSubmit","a","preventDefault","isCity","test","elements","fetch","photo_api","json","response_photo","nameError","document","getElementById","limitError","results","cityItem","urls","small","cityNumber","searchCity","setState","prevState","concat","style","height","setTimeout","API_KEY","FroeCastWeatherData","ForeCastResponse","foreCastWeather","transform","CurrentWeatherData","CurrentResponse","currentWeather","prevCities","Set","updatedCities","splice","filterCities","Array","from","filter","x","has","imageId","onSubmit","type","placeholder","getData","CurrentWeatherBoard","ReactDOM","render"],"mappings":"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","file":"static/js/main.f3f35e1f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/water.e4431485.svg\";","module.exports = __webpack_public_path__ + \"static/media/cold.9129d938.svg\";","module.exports = __webpack_public_path__ + \"static/media/high-temperature.126f15b7.svg\";","import React from \"react\";\nimport \"./city-card.scss\";\nimport { TiDeleteOutline } from \"react-icons/ti\";\n\nclass CityCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      photo: \"\",\n    };\n  }\n\n  deleteCard = (e) => {\n    let cardIndex = e.target.id;\n    this.props.onDeleteCard(cardIndex);\n  };\n\n  render() {\n    return (\n      <div className={\"card\"}>\n        <div\n          className=\"card__deleteBtn\"\n          onClick={this.deleteCard}\n          id={this.props.index}\n        >\n          <TiDeleteOutline />\n        </div>\n        <img\n          className=\"card__image\"\n          onClick={this.props.getWeatherData}\n          id={this.props.city}\n          src={this.props.photo}\n          alt={this.props.city}\n        />\n        <p className=\"card__title\">{this.props.city}</p>\n      </div>\n    );\n  }\n}\n\nexport default CityCard;\n","import React from \"react\";\nimport \"./city-card-container.scss\";\nimport CityCard from \"../city-card/CityCard\";\n\nclass CityCardContainer extends React.Component {\n  render() {\n    //get input cities\n    const { cities } = this.props;\n    return (\n      <div className=\"cityCards\">\n        {/* get elements list by using input city array */}\n        {cities.map((city, index) => (\n          <CityCard\n            key={city.id}\n            city={city.city}\n            photo={city.cityImage}\n            getWeatherData={this.props.getWeatherData}\n            selectedCity={this.props.selectedCity}\n            index={index}\n            onDeleteCard={this.props.deleteCard}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default CityCardContainer;\n","import React, { Fragment } from \"react\";\nimport Humidity from \"../../asset/image/water.svg\";\nimport minTemp from \"../../asset/image/cold.svg\";\nimport maxTemp from \"../../asset/image/high-temperature.svg\";\n\nimport \"./weather-forecast-board.scss\";\n\nclass WeatherForecastBoard extends React.Component {\n  getDay = (date) => {\n    const Day = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n    let whichDay = new Date(Date.parse(date.replace(/-/g, \"/\")));\n    return <h4>{Day[whichDay.getDay()]}</h4>;\n  };\n\n  getDegree = (temp) => {\n    const newTemp = Math.floor(temp);\n    return <p>{`${newTemp}Â°C`} </p>;\n  };\n\n  getPercent = (degree) => {\n    return <p>{`${degree}%`}</p>;\n  };\n\n  getForecastBoard = (props) => {\n    const WEATHER_DATA = this.props.weather.data || [];\n    //make sure already get data from api\n    if (WEATHER_DATA.length > 0) {\n      const furtherDays = [\n        WEATHER_DATA[0],\n        WEATHER_DATA[1],\n        WEATHER_DATA[2],\n        WEATHER_DATA[3],\n        WEATHER_DATA[4],\n        WEATHER_DATA[5],\n        WEATHER_DATA[6],\n      ];\n\n      return (\n        <div className=\"days\">\n          <div className=\"days__container\">\n            {furtherDays.map((day) => (\n              <div className=\"weatherCard\" key={day.moonrise_ts}>\n                {this.getDay(day.datetime)}\n                <div className=\"weatherCard__humidity\">\n                  <img src={Humidity} alt=\"\" />\n                  {this.getPercent(day.rh)}\n                </div>\n                <img\n                  className=\"weatherCard__icon\"\n                  src={`https://www.weatherbit.io/static/img/icons/${day.weather.icon}.png`}\n                  alt=\"\"\n                />\n                <div className=\"weatherCard__minTemp\">\n                  <img src={minTemp} alt=\"\" />\n                  {this.getDegree(day.min_temp)}\n                </div>\n                <div className=\"weatherCard__maxTemp\">\n                  <img src={maxTemp} alt=\"\" />\n                  {this.getDegree(day.max_temp)}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  render() {\n    return <Fragment>{this.getForecastBoard()}</Fragment>;\n  }\n}\n\nexport default WeatherForecastBoard;\n","import React, { Fragment } from \"react\";\nimport \"./current-weather-board.scss\";\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\n\nclass CurrentForecastBoard extends React.Component {\n  getDate = (date) => {\n    if (date !== undefined) {\n      const Day = [\"Sun\", \"Mon\", \"Tues\", \"Wed\", \"Thurs\", \"Fri\", \"Sat\"];\n      const Month = [\n        \"Jan\",\n        \"Feb\",\n        \"Mar\",\n        \"Apr\",\n        \"May\",\n        \"Jun\",\n        \"Jul\",\n        \"Aug\",\n        \"Sep\",\n        \"Oct\",\n        \"Nov\",\n        \"Dec\",\n      ];\n      //parse date time from json format\n      let whichDate = new Date(Date.parse(date));\n      return (\n        <Fragment>\n          {/*get date,day,month respectively*/}\n          {Day[whichDate.getDay(date)]},{whichDate.getDate(date)}{\" \"}\n          {Month[whichDate.getMonth(date)]}\n        </Fragment>\n      );\n    }\n  };\n\n  getDegree = (temp) => {\n    const newTemp = Math.floor(temp);\n    return (\n      <>\n        {newTemp}\n        <span>&deg;</span>{\" \"}\n      </>\n    );\n  };\n\n  getWeatherBoard = (props) => {\n    // get forecast data from  props\n    const { weather } = this.props;\n    if (weather.data !== undefined) {\n      const percentage = weather.data[0].pop;\n      return (\n        <>\n          <div className=\"description\">\n            <div className=\"description__title\">\n              <img\n                src={`https://www.weatherbit.io/static/img/icons/${weather.data[0].weather.icon}.png`}\n                alt=\"\"\n              />\n              <h4>Today</h4>\n            </div>\n            <p>{this.getDate(weather.data[0].timestamp_local)}</p>\n            <h3>{this.getDegree(weather.data[0].temp)}</h3>\n            <p>{weather.city_name}</p>\n            <p>{`Feels Like ${Math.floor(\n              weather.data[0].vis\n            )} - Sunset 20:15`}</p>\n          </div>\n          <div className=\"chart\">\n            <h4>Chance of Rain</h4>\n            <CircularProgressbar\n              className=\"chart__circle\"\n              value={percentage}\n              text={`${percentage}%`}\n              styles={buildStyles({\n                textColor: \"turquoise\",\n                pathColor: \"turquoise\",\n                trailColor: \"white\",\n              })}\n            />\n          </div>\n        </>\n      );\n    }\n  };\n\n  render() {\n    return <Fragment>{this.getWeatherBoard()}</Fragment>;\n  }\n}\n\nexport default CurrentForecastBoard;\n","import React from \"react\";\nimport \"./app.scss\";\nimport { FiSearch } from \"react-icons/fi\";\nimport CityCardContainer from \"./component/city-card-container/CityCardContainer\";\nimport WeatherForecastBoard from \"./component/weather-forecase-board/WeatherForecastBoard\";\nimport CurrentWeatherBoard from \"./component/current-weather-board/CurrentWeatherBoard\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchCity: [],\n      photo: [],\n      imageId: 0,\n      foreCastWeather: [],\n      currentWeather: [],\n    };\n  }\n\n  handleSubmit = async (e) => {\n    e.preventDefault();\n    let cityTest = /^[a-zA-Z]+(?:[\\s-][a-zA-Z]+)*$/;\n    let isCity = cityTest.test(e.target.elements[0].value);\n\n    let city = e.target.elements[0].value || \"Sydney\";\n    //splash photo api\n    const Access_key = \"BHJyBbJMrYRBqHzYuivvgBVspMShqGua5e0W1BvBkrA\";\n    const photo_api = await fetch(\n      `https://api.unsplash.com/search/photos/?client_id=${Access_key}&query=${city}&orientation=landscape`\n    );\n    const response_photo = await photo_api.json();\n\n    const nameError = document.getElementById(\"nameError\");\n    const limitError = document.getElementById(\"limitError\");\n\n    let cityItem;\n    //store input cities into this.state.searchCity only when the photo data exited in splash api\n    if (response_photo.results.length > 0) {\n      cityItem = {\n        id: new Date(),\n        city: city,\n        cityImage: response_photo.results[0].urls.small,\n      };\n      let cityNumber = this.state.searchCity.length;\n      //the maximum city number is 4\n      if (cityNumber < 4) {\n        this.setState((prevState) => ({\n          searchCity: prevState.searchCity.concat(cityItem),\n        }));\n      } else if (isCity === true && cityNumber > 3) {\n        limitError.style.height = \"2rem\";\n        setTimeout(() => (limitError.style.height = \"0rem\"), 4000);\n      } else if (isCity === false) {\n        nameError.style.height = \"2rem\";\n        setTimeout(() => (nameError.style.height = \"0rem\"), 4000);\n      }\n    } else {\n      nameError.style.height = \"2rem\";\n      setTimeout(() => (nameError.style.height = \"0rem\"), 4000);\n    }\n  };\n\n  getWeatherData = async (e) => {\n    // forecast weather api\n    const API_KEY = \"45ba571f29c54202a86d5d62ca83141a\";\n    const city = e.target.id;\n    const FroeCastWeatherData = await fetch(\n      `http://api.weatherbit.io/v2.0/forecast/daily?city=${city}&key=${API_KEY}`\n    );\n    const ForeCastResponse = await FroeCastWeatherData.json();\n    this.setState({\n      foreCastWeather: ForeCastResponse,\n    });\n\n    const selectedCity = document.getElementById(city);\n    selectedCity.style.transform = \"scale(1.1)\";\n\n    //current weather api\n    const CurrentWeatherData = await fetch(\n      `https://api.weatherbit.io/v2.0/forecast/hourly?city=${city}&key=${API_KEY}&hours=48`\n    );\n    const CurrentResponse = await CurrentWeatherData.json();\n    this.setState({\n      currentWeather: CurrentResponse,\n    });\n  };\n\n  deleteCard = (cardIndex) => {\n    let prevCities = new Set(this.state.searchCity);\n    //return deleted cities\n    let updatedCities = new Set(this.state.searchCity.splice(cardIndex, 1));\n    //get the different set with prev cities,which are the cities want to remain\n    let filterCities = Array.from(\n      new Set([...prevCities].filter((x) => !updatedCities.has(x)))\n    );\n    this.setState({\n      searchCity: filterCities,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"app__container\">\n          <section className=\"app__container__left\">\n            {/* search bar */}\n            <FiSearch className=\"search-icon\" />\n            <form onSubmit={this.handleSubmit}>\n              <input type=\"text\" placeholder=\"Search new place\"></input>\n              <button onClick={this.getData}>Search</button>\n            </form>\n            <div className=\"app__container__error\" id=\"nameError\">\n              It is not a Valid City Name!\n            </div>\n            <div className=\"app__container__error\" id=\"limitError\">\n              You only can add 4 cities!\n            </div>\n            {/* title */}\n            <h4>\n              Weather <span>Forecast</span>\n            </h4>\n            {/* city cards */}\n            <CityCardContainer\n              cities={this.state.searchCity}\n              imageId={this.state.imageId}\n              photo={this.state.photo}\n              getWeatherData={this.getWeatherData}\n              selectedCity={this.state.foreCastWeather}\n              deleteCard={this.deleteCard}\n            />\n            {/* Weather Forecast Board */}\n            <WeatherForecastBoard weather={this.state.foreCastWeather} />\n          </section>\n          <section className=\"app__container__right\">\n            {/* Current Weather Board */}\n            <CurrentWeatherBoard weather={this.state.currentWeather} />\n          </section>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Fragment } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <Fragment>\n    <App />\n  </Fragment>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}